// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.0
// source: rrpc.proto

package rrpc

import (
	context "context"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// tells who exchanged whim whom, along with a signature.
type ExchangeNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID   []byte `protobuf:"bytes,2,opt,name=senderID,proto3" json:"senderID,omitempty"`
	ReceiverID []byte `protobuf:"bytes,3,opt,name=ReceiverID,proto3" json:"ReceiverID,omitempty"`
	// We need both participants in the exchange to sign this,
	// otherwise one of them might forge the info
	SenderMerkleProof   *MerkleCertificate `protobuf:"bytes,4,opt,name=senderMerkleProof,proto3" json:"senderMerkleProof,omitempty"`
	ReceiverMerkleProof *MerkleCertificate `protobuf:"bytes,5,opt,name=ReceiverMerkleProof,proto3" json:"ReceiverMerkleProof,omitempty"`
	Calluuid            string             `protobuf:"bytes,6,opt,name=calluuid,proto3" json:"calluuid,omitempty"`
}

func (x *ExchangeNote) Reset() {
	*x = ExchangeNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeNote) ProtoMessage() {}

func (x *ExchangeNote) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeNote.ProtoReflect.Descriptor instead.
func (*ExchangeNote) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{0}
}

func (x *ExchangeNote) GetSenderID() []byte {
	if x != nil {
		return x.SenderID
	}
	return nil
}

func (x *ExchangeNote) GetReceiverID() []byte {
	if x != nil {
		return x.ReceiverID
	}
	return nil
}

func (x *ExchangeNote) GetSenderMerkleProof() *MerkleCertificate {
	if x != nil {
		return x.SenderMerkleProof
	}
	return nil
}

func (x *ExchangeNote) GetReceiverMerkleProof() *MerkleCertificate {
	if x != nil {
		return x.ReceiverMerkleProof
	}
	return nil
}

func (x *ExchangeNote) GetCalluuid() string {
	if x != nil {
		return x.Calluuid
	}
	return ""
}

type RelayStreamRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*RelayStreamRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *RelayStreamRequests) Reset() {
	*x = RelayStreamRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayStreamRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayStreamRequests) ProtoMessage() {}

func (x *RelayStreamRequests) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayStreamRequests.ProtoReflect.Descriptor instead.
func (*RelayStreamRequests) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{1}
}

func (x *RelayStreamRequests) GetRequests() []*RelayStreamRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type RelayStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *RelayRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *RelayStreamRequest) Reset() {
	*x = RelayStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayStreamRequest) ProtoMessage() {}

func (x *RelayStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayStreamRequest.ProtoReflect.Descriptor instead.
func (*RelayStreamRequest) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{2}
}

func (x *RelayStreamRequest) GetRequest() *RelayRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type RelayStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response         *CallStreamResponse `protobuf:"bytes,1,opt,name=Response,proto3" json:"Response,omitempty"`
	RelayStreamError *status.Status      `protobuf:"bytes,2,opt,name=RelayStreamError,proto3" json:"RelayStreamError,omitempty"`
	Uuid             string              `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *RelayStreamResponse) Reset() {
	*x = RelayStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayStreamResponse) ProtoMessage() {}

func (x *RelayStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayStreamResponse.ProtoReflect.Descriptor instead.
func (*RelayStreamResponse) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{3}
}

func (x *RelayStreamResponse) GetResponse() *CallStreamResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RelayStreamResponse) GetRelayStreamError() *status.Status {
	if x != nil {
		return x.RelayStreamError
	}
	return nil
}

func (x *RelayStreamResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type AttestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttestResponse) Reset() {
	*x = AttestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestResponse) ProtoMessage() {}

func (x *AttestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestResponse.ProtoReflect.Descriptor instead.
func (*AttestResponse) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{4}
}

type Attestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttesterName string `protobuf:"bytes,1,opt,name=attesterName,proto3" json:"attesterName,omitempty"`
	Signature    []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Accused      []byte `protobuf:"bytes,6,opt,name=accused,proto3" json:"accused,omitempty"`
}

func (x *Attestation) Reset() {
	*x = Attestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attestation) ProtoMessage() {}

func (x *Attestation) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attestation.ProtoReflect.Descriptor instead.
func (*Attestation) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{5}
}

func (x *Attestation) GetAttesterName() string {
	if x != nil {
		return x.AttesterName
	}
	return ""
}

func (x *Attestation) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Attestation) GetAccused() []byte {
	if x != nil {
		return x.Accused
	}
	return nil
}

type Proofs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proofs []*Proof `protobuf:"bytes,1,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (x *Proofs) Reset() {
	*x = Proofs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proofs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proofs) ProtoMessage() {}

func (x *Proofs) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proofs.ProtoReflect.Descriptor instead.
func (*Proofs) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{6}
}

func (x *Proofs) GetProofs() []*Proof {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerHostname   string        `protobuf:"bytes,2,opt,name=serverHostname,proto3" json:"serverHostname,omitempty"`
	WorkExchangeNote *ExchangeNote `protobuf:"bytes,3,opt,name=WorkExchangeNote,proto3" json:"WorkExchangeNote,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{7}
}

func (x *Proof) GetServerHostname() string {
	if x != nil {
		return x.ServerHostname
	}
	return ""
}

func (x *Proof) GetWorkExchangeNote() *ExchangeNote {
	if x != nil {
		return x.WorkExchangeNote
	}
	return nil
}

type SendProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *SendProofResponse) Reset() {
	*x = SendProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendProofResponse) ProtoMessage() {}

func (x *SendProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendProofResponse.ProtoReflect.Descriptor instead.
func (*SendProofResponse) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{8}
}

func (x *SendProofResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type Parcel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message_length is the length of the original message (before ECC
	// encoding).
	MessageLength []byte `protobuf:"bytes,2,opt,name=message_length,json=messageLength,proto3" json:"message_length,omitempty"`
	// each relay should receive a payload with it's shares from the shards [][][]byte:
	// relay i will receive:
	// [0][i], [1][i],....[n][i]. where n is the amount of shard chuncks there are from the ecc.
	Payload [][]byte `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty"`
	Method  string   `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"` // states which method to call.
	// determines the order of the parcels and which relays it should be sent through.
	RelayIndex int32         `protobuf:"varint,5,opt,name=RelayIndex,proto3" json:"RelayIndex,omitempty"`
	Note       *ExchangeNote `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	// using a signature to ensure no relay corrupt the parcel.
	Signature *MerkleCertificate `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Parcel) Reset() {
	*x = Parcel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parcel) ProtoMessage() {}

func (x *Parcel) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parcel.ProtoReflect.Descriptor instead.
func (*Parcel) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{9}
}

func (x *Parcel) GetMessageLength() []byte {
	if x != nil {
		return x.MessageLength
	}
	return nil
}

func (x *Parcel) GetPayload() [][]byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Parcel) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Parcel) GetRelayIndex() int32 {
	if x != nil {
		return x.RelayIndex
	}
	return 0
}

func (x *Parcel) GetNote() *ExchangeNote {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Parcel) GetSignature() *MerkleCertificate {
	if x != nil {
		return x.Signature
	}
	return nil
}

// used as a signature for batch sending.
type MerkleCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root  []byte   `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Path  [][]byte `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
	Index uint64   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// the signature is over the root only.
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *MerkleCertificate) Reset() {
	*x = MerkleCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleCertificate) ProtoMessage() {}

func (x *MerkleCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleCertificate.ProtoReflect.Descriptor instead.
func (*MerkleCertificate) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{10}
}

func (x *MerkleCertificate) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *MerkleCertificate) GetPath() [][]byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *MerkleCertificate) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MerkleCertificate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RelayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parcel *Parcel `protobuf:"bytes,1,opt,name=parcel,proto3" json:"parcel,omitempty"`
}

func (x *RelayRequest) Reset() {
	*x = RelayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayRequest) ProtoMessage() {}

func (x *RelayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayRequest.ProtoReflect.Descriptor instead.
func (*RelayRequest) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{11}
}

func (x *RelayRequest) GetParcel() *Parcel {
	if x != nil {
		return x.Parcel
	}
	return nil
}

type CallStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parcel *Parcel `protobuf:"bytes,1,opt,name=parcel,proto3" json:"parcel,omitempty"`
}

func (x *CallStreamRequest) Reset() {
	*x = CallStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallStreamRequest) ProtoMessage() {}

func (x *CallStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallStreamRequest.ProtoReflect.Descriptor instead.
func (*CallStreamRequest) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{12}
}

func (x *CallStreamRequest) GetParcel() *Parcel {
	if x != nil {
		return x.Parcel
	}
	return nil
}

type RrpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload       [][]byte `protobuf:"bytes,1,rep,name=Payload,proto3" json:"Payload,omitempty"`
	MessageLength []byte   `protobuf:"bytes,2,opt,name=MessageLength,proto3" json:"MessageLength,omitempty"`
	RelayIndex    int32    `protobuf:"varint,3,opt,name=RelayIndex,proto3" json:"RelayIndex,omitempty"`
}

func (x *RrpcResponse) Reset() {
	*x = RrpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RrpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RrpcResponse) ProtoMessage() {}

func (x *RrpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RrpcResponse.ProtoReflect.Descriptor instead.
func (*RrpcResponse) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{13}
}

func (x *RrpcResponse) GetPayload() [][]byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RrpcResponse) GetMessageLength() []byte {
	if x != nil {
		return x.MessageLength
	}
	return nil
}

func (x *RrpcResponse) GetRelayIndex() int32 {
	if x != nil {
		return x.RelayIndex
	}
	return 0
}

type CallStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// one of
	Response *RrpcResponse  `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	RpcError *status.Status `protobuf:"bytes,2,opt,name=RpcError,proto3" json:"RpcError,omitempty"`
	// the public key is not a must, but it is easier to work with.
	PublicKey []byte        `protobuf:"bytes,4,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Note      *ExchangeNote `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CallStreamResponse) Reset() {
	*x = CallStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallStreamResponse) ProtoMessage() {}

func (x *CallStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallStreamResponse.ProtoReflect.Descriptor instead.
func (*CallStreamResponse) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{14}
}

func (x *CallStreamResponse) GetResponse() *RrpcResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CallStreamResponse) GetRpcError() *status.Status {
	if x != nil {
		return x.RpcError
	}
	return nil
}

func (x *CallStreamResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *CallStreamResponse) GetNote() *ExchangeNote {
	if x != nil {
		return x.Note
	}
	return nil
}

// used to signa fast response
type FastPassClientSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callid         string `protobuf:"bytes,1,opt,name=callid,proto3" json:"callid,omitempty"`
	ClientHostName string `protobuf:"bytes,3,opt,name=clientHostName,proto3" json:"clientHostName,omitempty"`
	Signature      []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *FastPassClientSignature) Reset() {
	*x = FastPassClientSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastPassClientSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastPassClientSignature) ProtoMessage() {}

func (x *FastPassClientSignature) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastPassClientSignature.ProtoReflect.Descriptor instead.
func (*FastPassClientSignature) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{15}
}

func (x *FastPassClientSignature) GetCallid() string {
	if x != nil {
		return x.Callid
	}
	return ""
}

func (x *FastPassClientSignature) GetClientHostName() string {
	if x != nil {
		return x.ClientHostName
	}
	return ""
}

func (x *FastPassClientSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DirectCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method is the higher level rpc method name.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// payload is the piece of ECC encoded message.
	Payload []byte        `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Note    *ExchangeNote `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *DirectCallRequest) Reset() {
	*x = DirectCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectCallRequest) ProtoMessage() {}

func (x *DirectCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectCallRequest.ProtoReflect.Descriptor instead.
func (*DirectCallRequest) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{16}
}

func (x *DirectCallRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *DirectCallRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DirectCallRequest) GetNote() *ExchangeNote {
	if x != nil {
		return x.Note
	}
	return nil
}

type DirectCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*DirectCallResponse_Payload
	//	*DirectCallResponse_RpcError
	Result isDirectCallResponse_Result `protobuf_oneof:"Result"`
	//signed amount of work
	Note *ExchangeNote `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *DirectCallResponse) Reset() {
	*x = DirectCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectCallResponse) ProtoMessage() {}

func (x *DirectCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectCallResponse.ProtoReflect.Descriptor instead.
func (*DirectCallResponse) Descriptor() ([]byte, []int) {
	return file_rrpc_proto_rawDescGZIP(), []int{17}
}

func (m *DirectCallResponse) GetResult() isDirectCallResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *DirectCallResponse) GetPayload() []byte {
	if x, ok := x.GetResult().(*DirectCallResponse_Payload); ok {
		return x.Payload
	}
	return nil
}

func (x *DirectCallResponse) GetRpcError() *status.Status {
	if x, ok := x.GetResult().(*DirectCallResponse_RpcError); ok {
		return x.RpcError
	}
	return nil
}

func (x *DirectCallResponse) GetNote() *ExchangeNote {
	if x != nil {
		return x.Note
	}
	return nil
}

type isDirectCallResponse_Result interface {
	isDirectCallResponse_Result()
}

type DirectCallResponse_Payload struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3,oneof"`
}

type DirectCallResponse_RpcError struct {
	RpcError *status.Status `protobuf:"bytes,2,opt,name=RpcError,proto3,oneof"`
}

func (*DirectCallResponse_Payload) isDirectCallResponse_Result() {}

func (*DirectCallResponse_RpcError) isDirectCallResponse_Result() {}

var File_rrpc_proto protoreflect.FileDescriptor

var file_rrpc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x72,
	0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x01, 0x0a,
	0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x11, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x49, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x75, 0x75, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x0b,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x75, 0x73, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x73, 0x12, 0x23, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0x6f, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x22, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72,
	0x63, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x6f, 0x0a, 0x11, 0x4d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x34, 0x0a, 0x0c,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x22, 0x39, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x63, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x22, 0x6e, 0x0a,
	0x0c, 0x72, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xba, 0x01,
	0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x72,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x52, 0x70, 0x63, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x77, 0x0a, 0x17, 0x66, 0x61,
	0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x6d, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x08, 0x52,
	0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xc1, 0x01, 0x0a, 0x05, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x49, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x19, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x19, 0x2e,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x35,
	0x0a, 0x06, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x2e, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x0c, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73,
	0x1a, 0x17, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x32, 0x96, 0x01,
	0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x45, 0x0a, 0x0a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x2e,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x6f, 0x6e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x4d, 0x77, 0x65,
	0x69, 0x73, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x2f, 0x72, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rrpc_proto_rawDescOnce sync.Once
	file_rrpc_proto_rawDescData = file_rrpc_proto_rawDesc
)

func file_rrpc_proto_rawDescGZIP() []byte {
	file_rrpc_proto_rawDescOnce.Do(func() {
		file_rrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rrpc_proto_rawDescData)
	})
	return file_rrpc_proto_rawDescData
}

var file_rrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_rrpc_proto_goTypes = []interface{}{
	(*ExchangeNote)(nil),            // 0: rrpc.ExchangeNote
	(*RelayStreamRequests)(nil),     // 1: rrpc.RelayStreamRequests
	(*RelayStreamRequest)(nil),      // 2: rrpc.RelayStreamRequest
	(*RelayStreamResponse)(nil),     // 3: rrpc.RelayStreamResponse
	(*AttestResponse)(nil),          // 4: rrpc.AttestResponse
	(*Attestation)(nil),             // 5: rrpc.Attestation
	(*Proofs)(nil),                  // 6: rrpc.Proofs
	(*Proof)(nil),                   // 7: rrpc.Proof
	(*SendProofResponse)(nil),       // 8: rrpc.SendProofResponse
	(*Parcel)(nil),                  // 9: rrpc.Parcel
	(*MerkleCertificate)(nil),       // 10: rrpc.MerkleCertificate
	(*RelayRequest)(nil),            // 11: rrpc.RelayRequest
	(*CallStreamRequest)(nil),       // 12: rrpc.CallStreamRequest
	(*RrpcResponse)(nil),            // 13: rrpc.rrpcResponse
	(*CallStreamResponse)(nil),      // 14: rrpc.CallStreamResponse
	(*FastPassClientSignature)(nil), // 15: rrpc.fastPassClientSignature
	(*DirectCallRequest)(nil),       // 16: rrpc.DirectCallRequest
	(*DirectCallResponse)(nil),      // 17: rrpc.DirectCallResponse
	(*status.Status)(nil),           // 18: google.rpc.Status
}
var file_rrpc_proto_depIdxs = []int32{
	10, // 0: rrpc.ExchangeNote.senderMerkleProof:type_name -> rrpc.MerkleCertificate
	10, // 1: rrpc.ExchangeNote.ReceiverMerkleProof:type_name -> rrpc.MerkleCertificate
	2,  // 2: rrpc.RelayStreamRequests.requests:type_name -> rrpc.RelayStreamRequest
	11, // 3: rrpc.RelayStreamRequest.request:type_name -> rrpc.RelayRequest
	14, // 4: rrpc.RelayStreamResponse.Response:type_name -> rrpc.CallStreamResponse
	18, // 5: rrpc.RelayStreamResponse.RelayStreamError:type_name -> google.rpc.Status
	7,  // 6: rrpc.Proofs.proofs:type_name -> rrpc.Proof
	0,  // 7: rrpc.Proof.WorkExchangeNote:type_name -> rrpc.ExchangeNote
	18, // 8: rrpc.SendProofResponse.Status:type_name -> google.rpc.Status
	0,  // 9: rrpc.Parcel.note:type_name -> rrpc.ExchangeNote
	10, // 10: rrpc.Parcel.signature:type_name -> rrpc.MerkleCertificate
	9,  // 11: rrpc.RelayRequest.parcel:type_name -> rrpc.Parcel
	9,  // 12: rrpc.CallStreamRequest.parcel:type_name -> rrpc.Parcel
	13, // 13: rrpc.CallStreamResponse.response:type_name -> rrpc.rrpcResponse
	18, // 14: rrpc.CallStreamResponse.RpcError:type_name -> google.rpc.Status
	0,  // 15: rrpc.CallStreamResponse.note:type_name -> rrpc.ExchangeNote
	0,  // 16: rrpc.DirectCallRequest.note:type_name -> rrpc.ExchangeNote
	18, // 17: rrpc.DirectCallResponse.RpcError:type_name -> google.rpc.Status
	0,  // 18: rrpc.DirectCallResponse.note:type_name -> rrpc.ExchangeNote
	1,  // 19: rrpc.Relay.RelayStream:input_type -> rrpc.RelayStreamRequests
	5,  // 20: rrpc.Relay.Attest:input_type -> rrpc.Attestation
	6,  // 21: rrpc.Relay.SendProof:input_type -> rrpc.Proofs
	12, // 22: rrpc.Server.CallStream:input_type -> rrpc.CallStreamRequest
	16, // 23: rrpc.Server.DirectCall:input_type -> rrpc.DirectCallRequest
	3,  // 24: rrpc.Relay.RelayStream:output_type -> rrpc.RelayStreamResponse
	4,  // 25: rrpc.Relay.Attest:output_type -> rrpc.AttestResponse
	8,  // 26: rrpc.Relay.SendProof:output_type -> rrpc.SendProofResponse
	14, // 27: rrpc.Server.CallStream:output_type -> rrpc.CallStreamResponse
	17, // 28: rrpc.Server.DirectCall:output_type -> rrpc.DirectCallResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_rrpc_proto_init() }
func file_rrpc_proto_init() {
	if File_rrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayStreamRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proofs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parcel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RrpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastPassClientSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rrpc_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*DirectCallResponse_Payload)(nil),
		(*DirectCallResponse_RpcError)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rrpc_proto_goTypes,
		DependencyIndexes: file_rrpc_proto_depIdxs,
		MessageInfos:      file_rrpc_proto_msgTypes,
	}.Build()
	File_rrpc_proto = out.File
	file_rrpc_proto_rawDesc = nil
	file_rrpc_proto_goTypes = nil
	file_rrpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RelayClient is the client API for Relay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelayClient interface {
	// Relay is the primary function of a relay that's used to transfer
	// arbitrary RPC call in the layer above.
	RelayStream(ctx context.Context, opts ...grpc.CallOption) (Relay_RelayStreamClient, error)
	Attest(ctx context.Context, opts ...grpc.CallOption) (Relay_AttestClient, error)
	// on a fastcall the client will send a proof of participation by sending a hash of it's correspondence with a server
	// and the signature of the server on that hash. If the proof is valid the relay will store the last time this client contacted
	// a specific server.
	SendProof(ctx context.Context, opts ...grpc.CallOption) (Relay_SendProofClient, error)
}

type relayClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayClient(cc grpc.ClientConnInterface) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) RelayStream(ctx context.Context, opts ...grpc.CallOption) (Relay_RelayStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Relay_serviceDesc.Streams[0], "/rrpc.Relay/RelayStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayRelayStreamClient{stream}
	return x, nil
}

type Relay_RelayStreamClient interface {
	Send(*RelayStreamRequests) error
	Recv() (*RelayStreamResponse, error)
	grpc.ClientStream
}

type relayRelayStreamClient struct {
	grpc.ClientStream
}

func (x *relayRelayStreamClient) Send(m *RelayStreamRequests) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayRelayStreamClient) Recv() (*RelayStreamResponse, error) {
	m := new(RelayStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *relayClient) Attest(ctx context.Context, opts ...grpc.CallOption) (Relay_AttestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Relay_serviceDesc.Streams[1], "/rrpc.Relay/Attest", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayAttestClient{stream}
	return x, nil
}

type Relay_AttestClient interface {
	Send(*Attestation) error
	CloseAndRecv() (*AttestResponse, error)
	grpc.ClientStream
}

type relayAttestClient struct {
	grpc.ClientStream
}

func (x *relayAttestClient) Send(m *Attestation) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayAttestClient) CloseAndRecv() (*AttestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AttestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *relayClient) SendProof(ctx context.Context, opts ...grpc.CallOption) (Relay_SendProofClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Relay_serviceDesc.Streams[2], "/rrpc.Relay/SendProof", opts...)
	if err != nil {
		return nil, err
	}
	x := &relaySendProofClient{stream}
	return x, nil
}

type Relay_SendProofClient interface {
	Send(*Proofs) error
	CloseAndRecv() (*SendProofResponse, error)
	grpc.ClientStream
}

type relaySendProofClient struct {
	grpc.ClientStream
}

func (x *relaySendProofClient) Send(m *Proofs) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relaySendProofClient) CloseAndRecv() (*SendProofResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendProofResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelayServer is the server API for Relay service.
type RelayServer interface {
	// Relay is the primary function of a relay that's used to transfer
	// arbitrary RPC call in the layer above.
	RelayStream(Relay_RelayStreamServer) error
	Attest(Relay_AttestServer) error
	// on a fastcall the client will send a proof of participation by sending a hash of it's correspondence with a server
	// and the signature of the server on that hash. If the proof is valid the relay will store the last time this client contacted
	// a specific server.
	SendProof(Relay_SendProofServer) error
}

// UnimplementedRelayServer can be embedded to have forward compatible implementations.
type UnimplementedRelayServer struct {
}

func (*UnimplementedRelayServer) RelayStream(Relay_RelayStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method RelayStream not implemented")
}
func (*UnimplementedRelayServer) Attest(Relay_AttestServer) error {
	return status1.Errorf(codes.Unimplemented, "method Attest not implemented")
}
func (*UnimplementedRelayServer) SendProof(Relay_SendProofServer) error {
	return status1.Errorf(codes.Unimplemented, "method SendProof not implemented")
}

func RegisterRelayServer(s *grpc.Server, srv RelayServer) {
	s.RegisterService(&_Relay_serviceDesc, srv)
}

func _Relay_RelayStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayServer).RelayStream(&relayRelayStreamServer{stream})
}

type Relay_RelayStreamServer interface {
	Send(*RelayStreamResponse) error
	Recv() (*RelayStreamRequests, error)
	grpc.ServerStream
}

type relayRelayStreamServer struct {
	grpc.ServerStream
}

func (x *relayRelayStreamServer) Send(m *RelayStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayRelayStreamServer) Recv() (*RelayStreamRequests, error) {
	m := new(RelayStreamRequests)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Relay_Attest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayServer).Attest(&relayAttestServer{stream})
}

type Relay_AttestServer interface {
	SendAndClose(*AttestResponse) error
	Recv() (*Attestation, error)
	grpc.ServerStream
}

type relayAttestServer struct {
	grpc.ServerStream
}

func (x *relayAttestServer) SendAndClose(m *AttestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayAttestServer) Recv() (*Attestation, error) {
	m := new(Attestation)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Relay_SendProof_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayServer).SendProof(&relaySendProofServer{stream})
}

type Relay_SendProofServer interface {
	SendAndClose(*SendProofResponse) error
	Recv() (*Proofs, error)
	grpc.ServerStream
}

type relaySendProofServer struct {
	grpc.ServerStream
}

func (x *relaySendProofServer) SendAndClose(m *SendProofResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relaySendProofServer) Recv() (*Proofs, error) {
	m := new(Proofs)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Relay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rrpc.Relay",
	HandlerType: (*RelayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RelayStream",
			Handler:       _Relay_RelayStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Attest",
			Handler:       _Relay_Attest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendProof",
			Handler:       _Relay_SendProof_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rrpc.proto",
}

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	// Call is the main function of RRPC. After receiving enough
	// parcels, the function will reconstruct the final message, and
	// pass it up to the higher level RPC.
	CallStream(ctx context.Context, opts ...grpc.CallOption) (Server_CallStreamClient, error)
	// This is the common call between two honest machines, any case of failure will escalate to the regular call.
	DirectCall(ctx context.Context, opts ...grpc.CallOption) (Server_DirectCallClient, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) CallStream(ctx context.Context, opts ...grpc.CallOption) (Server_CallStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Server_serviceDesc.Streams[0], "/rrpc.Server/CallStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverCallStreamClient{stream}
	return x, nil
}

type Server_CallStreamClient interface {
	Send(*CallStreamRequest) error
	Recv() (*CallStreamResponse, error)
	grpc.ClientStream
}

type serverCallStreamClient struct {
	grpc.ClientStream
}

func (x *serverCallStreamClient) Send(m *CallStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverCallStreamClient) Recv() (*CallStreamResponse, error) {
	m := new(CallStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) DirectCall(ctx context.Context, opts ...grpc.CallOption) (Server_DirectCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Server_serviceDesc.Streams[1], "/rrpc.Server/DirectCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverDirectCallClient{stream}
	return x, nil
}

type Server_DirectCallClient interface {
	Send(*DirectCallRequest) error
	Recv() (*DirectCallResponse, error)
	grpc.ClientStream
}

type serverDirectCallClient struct {
	grpc.ClientStream
}

func (x *serverDirectCallClient) Send(m *DirectCallRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverDirectCallClient) Recv() (*DirectCallResponse, error) {
	m := new(DirectCallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	// Call is the main function of RRPC. After receiving enough
	// parcels, the function will reconstruct the final message, and
	// pass it up to the higher level RPC.
	CallStream(Server_CallStreamServer) error
	// This is the common call between two honest machines, any case of failure will escalate to the regular call.
	DirectCall(Server_DirectCallServer) error
}

// UnimplementedServerServer can be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (*UnimplementedServerServer) CallStream(Server_CallStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method CallStream not implemented")
}
func (*UnimplementedServerServer) DirectCall(Server_DirectCallServer) error {
	return status1.Errorf(codes.Unimplemented, "method DirectCall not implemented")
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_CallStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).CallStream(&serverCallStreamServer{stream})
}

type Server_CallStreamServer interface {
	Send(*CallStreamResponse) error
	Recv() (*CallStreamRequest, error)
	grpc.ServerStream
}

type serverCallStreamServer struct {
	grpc.ServerStream
}

func (x *serverCallStreamServer) Send(m *CallStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverCallStreamServer) Recv() (*CallStreamRequest, error) {
	m := new(CallStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Server_DirectCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).DirectCall(&serverDirectCallServer{stream})
}

type Server_DirectCallServer interface {
	Send(*DirectCallResponse) error
	Recv() (*DirectCallRequest, error)
	grpc.ServerStream
}

type serverDirectCallServer struct {
	grpc.ServerStream
}

func (x *serverDirectCallServer) Send(m *DirectCallResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverDirectCallServer) Recv() (*DirectCallRequest, error) {
	m := new(DirectCallRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rrpc.Server",
	HandlerType: (*ServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallStream",
			Handler:       _Server_CallStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DirectCall",
			Handler:       _Server_DirectCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rrpc.proto",
}
